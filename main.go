package main

import (
	"fmt"
	"os"
	"os/exec"
)

func main() {
	if len(os.Args) < 2 {
		fmt.Printf("Usage: %s GeneratorName\n\n", os.Args[0])
	}

	var outputName string = os.Args[1]

    // Write out a stub the generator.
    // Yes, this stub could just be stored on the filesystem
    // and copied, but what would be the fun in that?
    // Since the generated generator is a command, it goes
    // into a directory with the command name and creates
    // a main.go inside of that directory.
	err := os.MkdirAll(outputName, 0755)
	if err != nil {
		panic("Couldn't create " + outputName)
	}
	f, err := os.Create(outputName + "/main.go")
	if err != nil {
		panic("Couldn't create main.go")
	}

	fmt.Fprintf(f, "package main;\n")

    // The main.go contains a program which created takes an
    // output filename as a parameter, and writes to that file
    // 1. a "package $GOPACKAGE" line
    // 2. A comment saying not to edit the file since it was
    //    automatically generated.
    // 3. A stub telling the programmer where to add the code
    //    that *they* want to generate into the file.
    // 
    // And then runs go fmt on the generated code.
	fmt.Fprintf(f, `
    // You'll probably want to either remove or edit this. It's
    // a sample showing you how to add comments which will invoke your
    // code generation tool with "go generate".
    //
    // Make sure there's no space between the // and the word "go",
    // You'll also have to build your code generator and copy it
    // somewhere in your path before this will work.
    //`);
    fmt.Fprintf(f, "\n//go:generate %s SampleGeneratedFile.go\n", outputName)

	fmt.Fprintf(f, `import (
        "fmt"
        "os"
        "os/exec"
    )
    func main() {
    // If your generator needs more arguments than the file name,
    // you'll probably need to parse os.Args and update the help
    // here.
	if len(os.Args) < 2 {
		fmt.Printf("Usage: %%s outputfile.go\n\n", os.Args[0])
	}

    packageName := os.Getenv("GOPACKAGE")
    outputName  := os.Args[1]

	f, err := os.Create(outputName)
	if err != nil {
		panic("Couldn't create " + outputName)
	}
	fmt.Fprintf(f, "package %%s;\n", packageName)
    fmt.Fprintf(f, "// FILE AUTOMATICALLY GENERATED BY %%s DO NOT EDIT\n\n", os.Args[0])

    // You'll want to change this to output the code that you
    // want to generate here.
    fmt.Fprintf(f, "// YOUR GENERATED CODE GOES HERE.")

	cmd := exec.Command("gofmt", "-w", outputName)
	err = cmd.Run()
	if err != nil {
		fmt.Printf("Error running gofmt: %%s", err.Error())
	}
}`);


	cmd := exec.Command("gofmt", "-w", outputName)
	err = cmd.Run()
	if err != nil {
		fmt.Printf("Error running gofmt: %s", err.Error())
	}

}
//go:generate ./GoGeneratorGenerator SampleStub
