package main

// You'll probably want to either remove or edit this. It's
// a sample showing you how to add comments which will invoke your
// code generation tool with "go generate".
//
// Make sure there's no space between the // and the word "go",
// You'll also have to build your code generator and copy it
// somewhere in your path before this will work.
//
//go:generate SampleStub SampleGeneratedFile.go
import (
	"fmt"
	"os"
	"os/exec"
)

func main() {
	// If your generator needs more arguments than the file name,
	// you'll probably need to parse os.Args and update the help
	// here.
	if len(os.Args) < 2 {
		fmt.Printf("Usage: %s outputfile.go\n\n", os.Args[0])
	}

	packageName := os.Getenv("GOPACKAGE")
	outputName := os.Args[1]

	f, err := os.Create(outputName)
	if err != nil {
		panic("Couldn't create " + outputName)
	}
	fmt.Fprintf(f, "package %s;\n", packageName)
	fmt.Fprintf(f, "// FILE AUTOMATICALLY GENERATED BY %s DO NOT EDIT\n\n", os.Args[0])

	// You'll want to change this to output the code that you
	// want to generate here.
	fmt.Fprintf(f, "// YOUR GENERATED CODE GOES HERE.")

	cmd := exec.Command("gofmt", "-w", outputName)
	err = cmd.Run()
	if err != nil {
		fmt.Printf("Error running gofmt: %s", err.Error())
	}
}
